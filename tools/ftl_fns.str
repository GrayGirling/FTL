    "# Prolog for FTL tool\n"
    "#\n"
    "# Assuming this file is in ~/tools/ftl_fns.ftl, This file can be copied into a\n"
    "# long string suitable for incorporating into penv.c using the command:\n"
    "#\n"
    "#        ./ftl -np -q -- io filetostring tools/ftl_fns.ftl > tools/ftl_fns.str\n"
    "#\n"
    "# To test a new version use\n"
    "#\n"
    "#        FTL_PROLOG=tools/ftl_fns.ftl ./ftl\n"
    "#\n"
    "\n"
    "set codeid \"ftl\"\n"
    "\n"
    "set printf io.fprintf io.out\n"
    "set errorf io.fprintf io.err\n"
    "set printf_hb[hbf,fmt,vals]:{.hb=int_fmt_hexbits hbf!;printf fmt vals!;int_fmt_hexbits hb!;}\n"
    "set printfd printf_hb (-1)\n"
    "set printfx printf_hb (0)\n"
    "set printx[val]:{printfx \"%v\\n\"<val>!;}\n"
    "set print[val]:{printfd \"%v\\n\"<val>!;}\n"
    "\n"
    "#-----------------------------------------------------------------------------\n"
    "# script paths\n"
    "#-----------------------------------------------------------------------------\n"
    "\n"
    "set basename[path]:{\n"
    "   .pel = split sys.fs.sep path!;\n"
    "   .elcount = len pel!;\n"
    "   if (elcount gt 0) { pel.(elcount-1) } { \"\" }!\n"
    "}\n"
    "\n"
    "set dirname[path]:{\n"
    "   .pel = split sys.fs.sep path!;\n"
    "   .elcount = len pel!;\n"
    "   if (elcount gt 1) {\n"
    "      pel.(elcount-1)=NULL; join sys.fs.sep pel!\n"
    "   } {\n"
    "      sys.fs.thisdir\n"
    "   }!\n"
    "}\n"
    "\n"
    "set path_startwith[path,dir]:{\n"
    "   .plen = len path!;\n"
    "   if plen == 0 { dir } { join sys.shell.pathsep <dir, path>! }!\n"
    "}\n"
    "\n"
    "set path_addstart[pathenv,dir]:{\n"
    "   .path = if (inenv sys.env pathenv!) {sys.env.(pathenv)}{\"\"}!;\n"
    "   sys.env.(pathenv) = path_startwith path dir!;\n"
    "   # printf \"env %s now \'%s\'\\n\"<pathenv,sys.env.(pathenv)>!;\n"
    "}\n"
    "\n"
    "if (sys.fs.home != NULL) {\n"
    "   path_addstart \"FTL_PATH\" (join sys.fs.sep <sys.fs.home, \".\"+(codeid)>!)!;\n"
    "}{}\n"
    "\n"
    "######################\n"
    "\n"
    "set op_errors \"\"\n"
    "\n"
    "set operror[msg]:{ op_errors = \"\"+(op_errors)+(msg)+\"\\n\"; echo msg!; }\n"
    "\n"
    "set scanonly[errfn,scanfn,str]:{\n"
    "    .par=parse.scan str!;\n"
    "    if ((scanfn par!) {parse.scanempty par!}!) {TRUE} {errfn!;FALSE}!\n"
    "}\n"
    "\n"
    "set withint[key,outn,str]:{\n"
    "    scanonly []:{\n"
    "        operror (strf \"option %s (%v) must be a decimal number\"<key, str> !)!} \\\n"
    "            (parse.scanint outn) str!\n"
    "}\n"
    "\n"
    "set withnum[key,outn,str]:{\n"
    "    scanonly []:{operror (strf \"option %s (%v) must be a number\"<key, str>!)!}\\\n"
    "        (parse.scanintval outn) str!\n"
    "}\n"
    "\n"
    "set option_n 0\n"
    "set option_i 0\n"
    "\n"
    "set opt [\n"
    "    op1 = [num]:{ printf \"num is %v\\n\" <num>!; },\n"
    "    op2 = [str, str2]:{ printf \"str is %v, str2 is %v\\n\" <str, str2>!; },\n"
    "    n = withint \"-n\" @option_n,\n"
    "    i = withnum \"-i\" @option_i,\n"
    "]\n"
    "\n"
