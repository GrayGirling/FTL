> io fprintf io.out "€1 = £%[pounds]d.%[p]02d\n" [p=60, pounds=0]
€1 = £0.60
14
> #€1 = £0.60
> #14
> set printf io.fprintf io.out
> set n printf "sequence %02d %02d %02d %02d\n" <5..8>!
sequence 05 06 07 08
> #sequence 05 06 07 08
> eval n
21
> #21
> 
> fmt d 16 10 (16)
"+0000000016"
> # "+0000000016"
> <"tue","wed","thu","fri","sat","sun">.(day _rem_ 7)}
> strf "after %w it will be %w" <3, 3+1>
"after thu it will be fri"
> # "after fri it will be sat"
> 
> fmt help
d <f> <p> <val> - %d integer format
u <f> <p> <val> - %u unsigned format
o <f> <p> <val> - %u unsigned octal format
x <f> <p> <val> - %x unsigned hex format
X <f> <p> <val> - %X unsigned hex format
s <f> <p> <val> - %s string format
S <f> <p> <val> - %s zero terminated string format
c <f> <p> <val> - %c character format
b <f> <p> <val> - %b little endian binary format
B <f> <p> <val> - %B big endian binary format
v <f> <p> <val> - %v value format
f <f> <p> <val> - %f real fixed format
F <f> <p> <val> - %F real fixed format
e <f> <p> <val> - %e real exponent format
E <f> <p> <val> - %E real exponent format
g <f> <p> <val> - %e real general format
G <f> <p> <val> - %E real general format
j <f> <p> <val> - %j (JSON) value format
J <f> <p> <val> - %J (pretty JSON) value format
> 
> 