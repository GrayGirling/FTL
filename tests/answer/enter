> set outer_fn [_help="OUTER"]:{}
> enter [outer=outer_fn]
> set local_fn [_help="LOCAL"]:{}
> 
> # expected to be TRUE
> inenv local_fn "inenv"
TRUE
> inenv local_fn "outer_fn"
TRUE
> inenv local_fn "local_fn"
TRUE
> inenv local_fn "_help"
TRUE
> eval local_fn._help # "LOCAL"
"LOCAL"
> 
> inenv outer "inenv"
TRUE
> inenv outer "outer_fn"
TRUE
> inenv outer "_help"
TRUE
> eval outer._help    # "OUTER"
"OUTER"
> 
> inenv outer_fn "inenv"
TRUE
> inenv outer_fn "outer_fn"
TRUE
> inenv outer_fn "_help"
TRUE
> eval outer_fn._help # "OUTER"
"OUTER"
> 
> # expected to be FALSE
> inenv outer "local_fn"
FALSE
> inenv outer_fn "local_fn"
FALSE
> 
> 
> set outvar 1
> enter []
> set outvar 100
> leave
> eval outvar
100
> # should be 100
> 
> enter []
> set .outvar 1000
> leave
> eval outvar
100
> # should still be 100
> 
> set fn NULL
> enter []
> set priv 100
> set fn []:{priv}
> leave
> fn
100
> # should be 100
> eval priv
ftl $*console*:+47 in
ftl $*console*:48: undefined symbol 'priv'
ftl $*console*:+47: failed to evaluate expression
> #ftl $...: undefined symbol 'priv'
> 
> 
> set myclass [arg]:{
>    [self=[],state=arg]:{
>        enter self!;
>        .method = []:{state};
>        leaving!
>    }!
> }
> 
> myclass 2
[method=[]:{state}]
> set A myclass 2!
> set B myclass 90!
> A method
2
> B method
90
> 
> enter A
> enter method
> eval state
2
> # 2
> leave
> eval method!
2
> # 2
> leave
> 